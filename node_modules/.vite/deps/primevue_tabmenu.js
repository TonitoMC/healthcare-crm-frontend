import { K, Q$1 as Q, Rt, Y$1 as Y, z$1 as z } from "./dist-Cf1N86TT.js";
import "./eventbus-B_YnctEL.js";
import { Fragment, createBaseVNode, createBlock, createCommentVNode, createElementBlock, mergeProps, normalizeClass, openBlock, renderList, resolveDirective, resolveDynamicComponent, toDisplayString, withDirectives } from "./vue.runtime.esm-bundler-BHzSINof.js";
import { BaseStyle } from "./style-DMEDYKr8.js";
import { script as script$1 } from "./basecomponent-D1PEsf1l.js";
import "./service-jZP6eiEi.js";
import { Ripple } from "./ripple-C-ZIVpMW.js";

//#region node_modules/@primeuix/styles/dist/tabmenu/index.mjs
var style = "\n    .p-tabmenu {\n        overflow-x: auto;\n    }\n\n    .p-tabmenu-tablist {\n        display: flex;\n        margin: 0;\n        padding: 0;\n        list-style-type: none;\n        background: dt('tabmenu.tablist.background');\n        border-style: solid;\n        border-color: dt('tabmenu.tablist.border.color');\n        border-width: dt('tabmenu.tablist.border.width');\n        position: relative;\n    }\n\n    .p-tabmenu-item-link {\n        cursor: pointer;\n        user-select: none;\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        position: relative;\n        overflow: hidden;\n        background: dt('tabmenu.item.background');\n        border-style: solid;\n        border-width: dt('tabmenu.item.border.width');\n        border-color: dt('tabmenu.item.border.color');\n        color: dt('tabmenu.item.color');\n        padding: dt('tabmenu.item.padding');\n        font-weight: dt('tabmenu.item.font.weight');\n        transition:\n            background dt('tabmenu.transition.duration'),\n            border-color dt('tabmenu.transition.duration'),\n            color dt('tabmenu.transition.duration'),\n            outline-color dt('tabmenu.transition.duration'),\n            box-shadow dt('tabmenu.transition.duration');\n        margin: dt('tabmenu.item.margin');\n        outline-color: transparent;\n        gap: dt('tabmenu.item.gap');\n    }\n\n    .p-tabmenu-item-link:focus-visible {\n        z-index: 1;\n        box-shadow: dt('tabmenu.item.focus.ring.shadow');\n        outline: dt('tabmenu.item.focus.ring.width') dt('tabmenu.item.focus.ring.style') dt('tabmenu.item.focus.ring.color');\n        outline-offset: dt('tabmenu.item.focus.ring.offset');\n    }\n\n    .p-tabmenu-item-icon {\n        color: dt('tabmenu.item.icon.color');\n        transition:\n            background dt('tabmenu.transition.duration'),\n            border-color dt('tabmenu.transition.duration'),\n            color dt('tabmenu.transition.duration'),\n            outline-color dt('tabmenu.transition.duration'),\n            box-shadow dt('tabmenu.transition.duration');\n    }\n\n    .p-tabmenu-item-label {\n        line-height: 1;\n    }\n\n    .p-tabmenu-item:not(.p-tabmenu-item-active):not(.p-disabled):hover .p-tabmenu-item-link {\n        background: dt('tabmenu.item.hover.background');\n        border-color: dt('tabmenu.item.hover.border.color');\n        color: dt('tabmenu.item.hover.color');\n    }\n\n    .p-tabmenu-item:not(.p-tabmenu-item-active):not(.p-disabled):hover .p-tabmenu-item-icon {\n        color: dt('tabmenu.item.icon.hover.color');\n    }\n\n    .p-tabmenu-item-active .p-tabmenu-item-link {\n        background: dt('tabmenu.item.active.background');\n        border-color: dt('tabmenu.item.active.border.color');\n        color: dt('tabmenu.item.active.color');\n    }\n\n    .p-tabmenu-item-active .p-tabmenu-item-icon {\n        color: dt('tabmenu.item.icon.active.color');\n    }\n\n    .p-tabmenu-active-bar {\n        z-index: 1;\n        display: block;\n        position: absolute;\n        bottom: dt('tabmenu.active.bar.bottom');\n        height: dt('tabmenu.active.bar.height');\n        background: dt('tabmenu.active.bar.background');\n        transition: 250ms cubic-bezier(0.35, 0, 0.25, 1);\n    }\n\n    .p-tabmenu::-webkit-scrollbar {\n        display: none;\n    }\n";

//#endregion
//#region node_modules/primevue/tabmenu/style/index.mjs
var TabMenuStyle = BaseStyle.extend({
	name: "tabmenu",
	style,
	classes: {
		root: "p-tabmenu p-component",
		tablist: "p-tabmenu-tablist",
		item: function item(_ref) {
			var instance = _ref.instance, index = _ref.index, _item = _ref.item;
			return ["p-tabmenu-item", {
				"p-tabmenu-item-active": instance.d_activeIndex === index,
				"p-disabled": instance.disabled(_item)
			}];
		},
		itemLink: "p-tabmenu-item-link",
		itemIcon: "p-tabmenu-item-icon",
		itemLabel: "p-tabmenu-item-label",
		activeBar: "p-tabmenu-active-bar"
	}
});

//#endregion
//#region node_modules/primevue/tabmenu/index.mjs
var script$1$1 = {
	name: "BaseTabMenu",
	"extends": script$1,
	props: {
		model: {
			type: Array,
			"default": null
		},
		activeIndex: {
			type: Number,
			"default": 0
		},
		ariaLabelledby: {
			type: String,
			"default": null
		},
		ariaLabel: {
			type: String,
			"default": null
		}
	},
	style: TabMenuStyle,
	provide: function provide() {
		return {
			$pcTabMenu: this,
			$parentInstance: this
		};
	}
};
var script = {
	name: "TabMenu",
	"extends": script$1$1,
	inheritAttrs: false,
	emits: ["update:activeIndex", "tab-change"],
	data: function data() {
		return { d_activeIndex: this.activeIndex };
	},
	watch: { activeIndex: {
		flush: "post",
		handler: function handler(newValue) {
			this.d_activeIndex = newValue;
			this.updateInkBar();
		}
	} },
	mounted: function mounted() {
		var _this = this;
		this.$nextTick(function() {
			_this.updateInkBar();
		});
		var activeItem = this.findActiveItem();
		activeItem && (activeItem.tabIndex = "0");
	},
	updated: function updated() {
		this.updateInkBar();
	},
	methods: {
		getPTOptions: function getPTOptions(key, item, index) {
			return this.ptm(key, { context: {
				item,
				index
			} });
		},
		onItemClick: function onItemClick(event, item, index) {
			if (this.disabled(item)) {
				event.preventDefault();
				return;
			}
			if (item.command) item.command({
				originalEvent: event,
				item
			});
			if (index !== this.d_activeIndex) {
				this.d_activeIndex = index;
				this.$emit("update:activeIndex", this.d_activeIndex);
			}
			this.$emit("tab-change", {
				originalEvent: event,
				index
			});
		},
		onKeydownItem: function onKeydownItem(event, item, index) {
			switch (event.code) {
				case "ArrowRight":
					this.navigateToNextItem(event.target);
					event.preventDefault();
					break;
				case "ArrowLeft":
					this.navigateToPrevItem(event.target);
					event.preventDefault();
					break;
				case "Home":
					this.navigateToFirstItem(event.target);
					event.preventDefault();
					break;
				case "End":
					this.navigateToLastItem(event.target);
					event.preventDefault();
					break;
				case "Space":
				case "NumpadEnter":
				case "Enter":
					this.onItemClick(event, item, index);
					event.preventDefault();
					break;
				case "Tab":
					this.onTabKey();
					break;
			}
		},
		navigateToNextItem: function navigateToNextItem(target) {
			var nextItem = this.findNextItem(target);
			nextItem && this.setFocusToMenuitem(target, nextItem);
		},
		navigateToPrevItem: function navigateToPrevItem(target) {
			var prevItem = this.findPrevItem(target);
			prevItem && this.setFocusToMenuitem(target, prevItem);
		},
		navigateToFirstItem: function navigateToFirstItem(target) {
			var firstItem = this.findFirstItem(target);
			firstItem && this.setFocusToMenuitem(target, firstItem);
		},
		navigateToLastItem: function navigateToLastItem(target) {
			var lastItem = this.findLastItem(target);
			lastItem && this.setFocusToMenuitem(target, lastItem);
		},
		findNextItem: function findNextItem(item) {
			var nextItem = item.parentElement.nextElementSibling;
			return nextItem ? Q(nextItem, "data-p-disabled") === true ? this.findNextItem(nextItem.children[0]) : nextItem.children[0] : null;
		},
		findPrevItem: function findPrevItem(item) {
			var prevItem = item.parentElement.previousElementSibling;
			return prevItem ? Q(prevItem, "data-p-disabled") === true ? this.findPrevItem(prevItem.children[0]) : prevItem.children[0] : null;
		},
		findFirstItem: function findFirstItem() {
			var firstSibling = z(this.$refs.nav, "[data-pc-section=\"item\"][data-p-disabled=\"false\"]");
			return firstSibling ? firstSibling.children[0] : null;
		},
		findLastItem: function findLastItem() {
			var siblings = Y(this.$refs.nav, "[data-pc-section=\"item\"][data-p-disabled=\"false\"]");
			return siblings ? siblings[siblings.length - 1].children[0] : null;
		},
		findActiveItem: function findActiveItem() {
			var activeItem = z(this.$refs.nav, "[data-pc-section=\"item\"][data-p-disabled=\"false\"][data-p-active=\"true\"]");
			return activeItem ? activeItem.children[0] : null;
		},
		setFocusToMenuitem: function setFocusToMenuitem(target, focusableItem) {
			target.tabIndex = "-1";
			focusableItem.tabIndex = "0";
			focusableItem.focus();
		},
		onTabKey: function onTabKey() {
			var activeItem = z(this.$refs.nav, "[data-pc-section=\"item\"][data-p-disabled=\"false\"][data-p-active=\"true\"]");
			var focusedItem = z(this.$refs.nav, "[data-pc-section=\"itemlink\"][tabindex=\"0\"]");
			if (focusedItem !== activeItem.children[0]) {
				activeItem && (activeItem.children[0].tabIndex = "0");
				focusedItem.tabIndex = "-1";
			}
		},
		visible: function visible(item) {
			return typeof item.visible === "function" ? item.visible() : item.visible !== false;
		},
		disabled: function disabled(item) {
			return typeof item.disabled === "function" ? item.disabled() : item.disabled === true;
		},
		label: function label(item) {
			return typeof item.label === "function" ? item.label() : item.label;
		},
		updateInkBar: function updateInkBar() {
			var tabs = this.$refs.nav.children;
			var inkHighlighted = false;
			for (var i = 0; i < tabs.length; i++) {
				var tab = tabs[i];
				if (Q(tab, "data-p-active")) {
					this.$refs.inkbar.style.width = Rt(tab) + "px";
					this.$refs.inkbar.style.left = K(tab).left - K(this.$refs.nav).left + "px";
					inkHighlighted = true;
				}
			}
			if (!inkHighlighted) {
				this.$refs.inkbar.style.width = "0px";
				this.$refs.inkbar.style.left = "0px";
			}
		},
		getMenuItemProps: function getMenuItemProps(item, index) {
			var _this2 = this;
			return {
				action: mergeProps({
					"class": this.cx("itemLink"),
					tabindex: -1,
					onClick: function onClick($event) {
						return _this2.onItemClick($event, item, index);
					},
					onKeyDown: function onKeyDown($event) {
						return _this2.onKeydownItem($event, item, index);
					}
				}, this.getPTOptions("itemLink", item, index)),
				icon: mergeProps({ "class": [this.cx("itemIcon"), item.icon] }, this.getPTOptions("itemIcon", item, index)),
				label: mergeProps({ "class": this.cx("itemLabel") }, this.getPTOptions("itemLabel", item, index))
			};
		}
	},
	directives: { ripple: Ripple }
};
var _hoisted_1 = ["aria-labelledby", "aria-label"];
var _hoisted_2 = [
	"onClick",
	"onKeydown",
	"data-p-active",
	"data-p-disabled"
];
var _hoisted_3 = [
	"href",
	"target",
	"aria-label",
	"aria-disabled"
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
	var _directive_ripple = resolveDirective("ripple");
	return openBlock(), createElementBlock("div", mergeProps({ "class": _ctx.cx("root") }, _ctx.ptmi("root")), [createBaseVNode("ul", mergeProps({
		ref: "nav",
		"class": _ctx.cx("tablist"),
		role: "menubar",
		"aria-labelledby": _ctx.ariaLabelledby,
		"aria-label": _ctx.ariaLabel
	}, _ctx.ptm("tablist")), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.model, function(item, i) {
		return openBlock(), createElementBlock(Fragment, { key: $options.label(item) + "_" + i.toString() }, [$options.visible(item) ? (openBlock(), createElementBlock("li", mergeProps({
			key: 0,
			ref_for: true,
			ref: "tab",
			"class": [_ctx.cx("item", {
				item,
				index: i
			}), item["class"]],
			role: "presentation",
			onClick: function onClick($event) {
				return $options.onItemClick($event, item, i);
			},
			onKeydown: function onKeydown($event) {
				return $options.onKeydownItem($event, item, i);
			}
		}, { ref_for: true }, $options.getPTOptions("item", item, i), {
			"data-p-active": $data.d_activeIndex === i,
			"data-p-disabled": $options.disabled(item)
		}), [!_ctx.$slots.item ? withDirectives((openBlock(), createElementBlock("a", mergeProps({
			key: 0,
			ref_for: true,
			ref: "tabLink",
			role: "menuitem",
			href: item.url,
			"class": _ctx.cx("itemLink"),
			target: item.target,
			"aria-label": $options.label(item),
			"aria-disabled": $options.disabled(item),
			tabindex: -1
		}, { ref_for: true }, $options.getPTOptions("itemLink", item, i)), [_ctx.$slots.itemicon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.itemicon), {
			key: 0,
			item,
			"class": normalizeClass(_ctx.cx("itemIcon"))
		}, null, 8, ["item", "class"])) : item.icon ? (openBlock(), createElementBlock("span", mergeProps({
			key: 1,
			"class": [_ctx.cx("itemIcon"), item.icon]
		}, { ref_for: true }, $options.getPTOptions("itemIcon", item, i)), null, 16)) : createCommentVNode("", true), createBaseVNode("span", mergeProps({ "class": _ctx.cx("itemLabel") }, { ref_for: true }, $options.getPTOptions("itemLabel", item, i)), toDisplayString($options.label(item)), 17)], 16, _hoisted_3)), [[_directive_ripple]]) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.$slots.item), {
			key: 1,
			item,
			index: i,
			active: i === $data.d_activeIndex,
			label: $options.label(item),
			props: $options.getMenuItemProps(item, i)
		}, null, 8, [
			"item",
			"index",
			"active",
			"label",
			"props"
		]))], 16, _hoisted_2)) : createCommentVNode("", true)], 64);
	}), 128)), createBaseVNode("li", mergeProps({
		ref: "inkbar",
		role: "none",
		"class": _ctx.cx("activeBar")
	}, _ctx.ptm("activeBar")), null, 16)], 16, _hoisted_1)], 16);
}
script.render = render;

//#endregion
export { script as default };
//# sourceMappingURL=primevue_tabmenu.js.map