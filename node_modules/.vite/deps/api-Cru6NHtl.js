import { X, k, p } from "./dist-Cf1N86TT.js";

//#region node_modules/@primevue/core/api/index.mjs
var FilterMatchMode = {
	STARTS_WITH: "startsWith",
	CONTAINS: "contains",
	NOT_CONTAINS: "notContains",
	ENDS_WITH: "endsWith",
	EQUALS: "equals",
	NOT_EQUALS: "notEquals",
	IN: "in",
	LESS_THAN: "lt",
	LESS_THAN_OR_EQUAL_TO: "lte",
	GREATER_THAN: "gt",
	GREATER_THAN_OR_EQUAL_TO: "gte",
	BETWEEN: "between",
	DATE_IS: "dateIs",
	DATE_IS_NOT: "dateIsNot",
	DATE_BEFORE: "dateBefore",
	DATE_AFTER: "dateAfter"
};
var FilterOperator = {
	AND: "and",
	OR: "or"
};
function _createForOfIteratorHelper(r, e) {
	var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
	if (!t) {
		if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {
			t && (r = t);
			var _n = 0, F = function F$1() {};
			return {
				s: F,
				n: function n() {
					return _n >= r.length ? { done: true } : {
						done: false,
						value: r[_n++]
					};
				},
				e: function e$1(r$1) {
					throw r$1;
				},
				f: F
			};
		}
		throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}
	var o, a = true, u = false;
	return {
		s: function s() {
			t = t.call(r);
		},
		n: function n() {
			var r$1 = t.next();
			return a = r$1.done, r$1;
		},
		e: function e$1(r$1) {
			u = true, o = r$1;
		},
		f: function f() {
			try {
				a || null == t["return"] || t["return"]();
			} finally {
				if (u) throw o;
			}
		}
	};
}
function _unsupportedIterableToArray(r, a) {
	if (r) {
		if ("string" == typeof r) return _arrayLikeToArray(r, a);
		var t = {}.toString.call(r).slice(8, -1);
		return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
	}
}
function _arrayLikeToArray(r, a) {
	(null == a || a > r.length) && (a = r.length);
	for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
	return n;
}
var FilterService = {
	filter: function filter(value, fields, filterValue, filterMatchMode, filterLocale) {
		var filteredItems = [];
		if (!value) return filteredItems;
		var _iterator = _createForOfIteratorHelper(value), _step;
		try {
			for (_iterator.s(); !(_step = _iterator.n()).done;) {
				var item = _step.value;
				if (typeof item === "string") {
					if (this.filters[filterMatchMode](item, filterValue, filterLocale)) {
						filteredItems.push(item);
						continue;
					}
				} else {
					var _iterator2 = _createForOfIteratorHelper(fields), _step2;
					try {
						for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
							var field = _step2.value;
							var fieldValue = p(item, field);
							if (this.filters[filterMatchMode](fieldValue, filterValue, filterLocale)) {
								filteredItems.push(item);
								break;
							}
						}
					} catch (err) {
						_iterator2.e(err);
					} finally {
						_iterator2.f();
					}
				}
			}
		} catch (err) {
			_iterator.e(err);
		} finally {
			_iterator.f();
		}
		return filteredItems;
	},
	filters: {
		startsWith: function startsWith(value, filter, filterLocale) {
			if (filter === void 0 || filter === null || filter === "") return true;
			if (value === void 0 || value === null) return false;
			var filterValue = X(filter.toString()).toLocaleLowerCase(filterLocale);
			return X(value.toString()).toLocaleLowerCase(filterLocale).slice(0, filterValue.length) === filterValue;
		},
		contains: function contains(value, filter, filterLocale) {
			if (filter === void 0 || filter === null || filter === "") return true;
			if (value === void 0 || value === null) return false;
			var filterValue = X(filter.toString()).toLocaleLowerCase(filterLocale);
			return X(value.toString()).toLocaleLowerCase(filterLocale).indexOf(filterValue) !== -1;
		},
		notContains: function notContains(value, filter, filterLocale) {
			if (filter === void 0 || filter === null || filter === "") return true;
			if (value === void 0 || value === null) return false;
			var filterValue = X(filter.toString()).toLocaleLowerCase(filterLocale);
			return X(value.toString()).toLocaleLowerCase(filterLocale).indexOf(filterValue) === -1;
		},
		endsWith: function endsWith(value, filter, filterLocale) {
			if (filter === void 0 || filter === null || filter === "") return true;
			if (value === void 0 || value === null) return false;
			var filterValue = X(filter.toString()).toLocaleLowerCase(filterLocale);
			var stringValue = X(value.toString()).toLocaleLowerCase(filterLocale);
			return stringValue.indexOf(filterValue, stringValue.length - filterValue.length) !== -1;
		},
		equals: function equals(value, filter, filterLocale) {
			if (filter === void 0 || filter === null || filter === "") return true;
			if (value === void 0 || value === null) return false;
			if (value.getTime && filter.getTime) return value.getTime() === filter.getTime();
			else return X(value.toString()).toLocaleLowerCase(filterLocale) == X(filter.toString()).toLocaleLowerCase(filterLocale);
		},
		notEquals: function notEquals(value, filter, filterLocale) {
			if (filter === void 0 || filter === null || filter === "") return false;
			if (value === void 0 || value === null) return true;
			if (value.getTime && filter.getTime) return value.getTime() !== filter.getTime();
			else return X(value.toString()).toLocaleLowerCase(filterLocale) != X(filter.toString()).toLocaleLowerCase(filterLocale);
		},
		"in": function _in(value, filter) {
			if (filter === void 0 || filter === null || filter.length === 0) return true;
			for (var i = 0; i < filter.length; i++) if (k(value, filter[i])) return true;
			return false;
		},
		between: function between(value, filter) {
			if (filter == null || filter[0] == null || filter[1] == null) return true;
			if (value === void 0 || value === null) return false;
			if (value.getTime) return filter[0].getTime() <= value.getTime() && value.getTime() <= filter[1].getTime();
			else return filter[0] <= value && value <= filter[1];
		},
		lt: function lt(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			if (value.getTime && filter.getTime) return value.getTime() < filter.getTime();
			else return value < filter;
		},
		lte: function lte(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			if (value.getTime && filter.getTime) return value.getTime() <= filter.getTime();
			else return value <= filter;
		},
		gt: function gt(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			if (value.getTime && filter.getTime) return value.getTime() > filter.getTime();
			else return value > filter;
		},
		gte: function gte(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			if (value.getTime && filter.getTime) return value.getTime() >= filter.getTime();
			else return value >= filter;
		},
		dateIs: function dateIs(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			return value.toDateString() === filter.toDateString();
		},
		dateIsNot: function dateIsNot(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			return value.toDateString() !== filter.toDateString();
		},
		dateBefore: function dateBefore(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			return value.getTime() < filter.getTime();
		},
		dateAfter: function dateAfter(value, filter) {
			if (filter === void 0 || filter === null) return true;
			if (value === void 0 || value === null) return false;
			return value.getTime() > filter.getTime();
		}
	},
	register: function register(rule, fn) {
		this.filters[rule] = fn;
	}
};

//#endregion
export { FilterMatchMode, FilterOperator, FilterService };
//# sourceMappingURL=api-Cru6NHtl.js.map